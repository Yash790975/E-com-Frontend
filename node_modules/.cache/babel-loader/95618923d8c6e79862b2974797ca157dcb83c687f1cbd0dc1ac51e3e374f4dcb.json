{"ast":null,"code":"// // Retrieve initial state from localStorage if available\n// const getInitialCart = () => {\n//   const storedCart = localStorage.getItem(\"cart\");\n//   return storedCart ? JSON.parse(storedCart) : [];\n// };\n\n// const handleCart = (state = getInitialCart(), action) => {\n//   const product = action.payload;\n//   let updatedCart;\n\n//   switch (action.type) {\n//     case \"ADDITEM\":\n//       // Check if product already in cart\n//       const exist = state.find((x) => x.id === product.id);\n//       if (exist) {\n//         // Increase the quantity\n//         updatedCart = state.map((x) =>\n//           x.id === product.id ? { ...x, qty: x.qty + 1 } : x\n//         );\n//       } else {\n//         updatedCart = [...state, { ...product, qty: 1 }];\n//       }\n//       // Update localStorage\n//       localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n//       return updatedCart;\n\n//     case \"DELITEM\":\n//       const exist2 = state.find((x) => x.id === product.id);\n//       if (exist2.qty === 1) {\n//         updatedCart = state.filter((x) => x.id !== exist2.id);\n//       } else {\n//         updatedCart = state.map((x) =>\n//           x.id === product.id ? { ...x, qty: x.qty - 1 } : x\n//         );\n//       }\n//       // Update localStorage\n//       localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n//       return updatedCart;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default handleCart;\n\nconst cart = [];\nconst handleCart = (state = cart, action) => {\n  switch (action.type) {\n    case \"ADDITEM\":\n      const exist = state.find(x => x.id === action.payload.id);\n      if (exist) {\n        return state.map(x => x.id === action.payload.id ? {\n          ...x,\n          qty: x.qty + 1\n        } : x);\n      } else {\n        return [...state, {\n          ...action.payload,\n          qty: 1\n        }];\n      }\n    case \"DELITEM\":\n      return state.filter(x => x.id !== action.payload.id);\n    default:\n      return state;\n  }\n};\nexport default handleCart;","map":{"version":3,"names":["cart","handleCart","state","action","type","exist","find","x","id","payload","map","qty","filter"],"sources":["Y:/MY/Certificate/E-COM/E_Commerce/src/redux/reducer/handleCart.js"],"sourcesContent":["// // Retrieve initial state from localStorage if available\n// const getInitialCart = () => {\n//   const storedCart = localStorage.getItem(\"cart\");\n//   return storedCart ? JSON.parse(storedCart) : [];\n// };\n\n// const handleCart = (state = getInitialCart(), action) => {\n//   const product = action.payload;\n//   let updatedCart;\n\n//   switch (action.type) {\n//     case \"ADDITEM\":\n//       // Check if product already in cart\n//       const exist = state.find((x) => x.id === product.id);\n//       if (exist) {\n//         // Increase the quantity\n//         updatedCart = state.map((x) =>\n//           x.id === product.id ? { ...x, qty: x.qty + 1 } : x\n//         );\n//       } else {\n//         updatedCart = [...state, { ...product, qty: 1 }];\n//       }\n//       // Update localStorage\n//       localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n//       return updatedCart;\n\n//     case \"DELITEM\":\n//       const exist2 = state.find((x) => x.id === product.id);\n//       if (exist2.qty === 1) {\n//         updatedCart = state.filter((x) => x.id !== exist2.id);\n//       } else {\n//         updatedCart = state.map((x) =>\n//           x.id === product.id ? { ...x, qty: x.qty - 1 } : x\n//         );\n//       }\n//       // Update localStorage\n//       localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n//       return updatedCart;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default handleCart;\n\n\nconst cart = [];\n\nconst handleCart = (state = cart, action) => {\n  switch (action.type) {\n    case \"ADDITEM\":\n      const exist = state.find((x) => x.id === action.payload.id);\n      if (exist) {\n        return state.map((x) =>\n          x.id === action.payload.id ? { ...x, qty: x.qty + 1 } : x\n        );\n      } else {\n        return [...state, { ...action.payload, qty: 1 }];\n      }\n\n    case \"DELITEM\":\n      return state.filter((x) => x.id !== action.payload.id);\n\n    default:\n      return state;\n  }\n};\n\nexport default handleCart;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,MAAMA,IAAI,GAAG,EAAE;AAEf,MAAMC,UAAU,GAAGA,CAACC,KAAK,GAAGF,IAAI,EAAEG,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ,MAAMC,KAAK,GAAGH,KAAK,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAACM,OAAO,CAACD,EAAE,CAAC;MAC3D,IAAIH,KAAK,EAAE;QACT,OAAOH,KAAK,CAACQ,GAAG,CAAEH,CAAC,IACjBA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAACM,OAAO,CAACD,EAAE,GAAG;UAAE,GAAGD,CAAC;UAAEI,GAAG,EAAEJ,CAAC,CAACI,GAAG,GAAG;QAAE,CAAC,GAAGJ,CAC1D,CAAC;MACH,CAAC,MAAM;QACL,OAAO,CAAC,GAAGL,KAAK,EAAE;UAAE,GAAGC,MAAM,CAACM,OAAO;UAAEE,GAAG,EAAE;QAAE,CAAC,CAAC;MAClD;IAEF,KAAK,SAAS;MACZ,OAAOT,KAAK,CAACU,MAAM,CAAEL,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAACM,OAAO,CAACD,EAAE,CAAC;IAExD;MACE,OAAON,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}