{"ast":null,"code":"// // components/PrivateRoute.jsx - Create a component for protected routes\n\n// import React from 'react';\n// import { Navigate, Outlet } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\n\n// const PrivateRoute = () => {\n//   const { isAuthenticated, loading } = useSelector(state => state.auth);\n\n//   // If auth is being loaded, you might want to show a loading spinner\n//   if (loading) {\n//     return <div className=\"container text-center py-5\">Loading...</div>;\n//   }\n\n//   // If not authenticated, redirect to login\n//   return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\n// };\n\n// export default PrivateRoute;\n\n// ===================================2nd===================================\n\n// // src/components/PrivateRoute.js\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\n// import { useSelector } from \"react-redux\";\n\n// const PrivateRoute = () => {\n//   const { isAuthenticated } = useSelector(state => state.auth);\n//   const location = useLocation();\n\n//   // Store the current location before redirecting to login\n//   if (!isAuthenticated) {\n//     // Save the current path to redirect back after login\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\n//     return <Navigate to=\"/login\" />;\n//   }\n\n//   // If authenticated, render the protected routes\n//   return <Outlet />;\n// };\n\n// export default PrivateRoute;\n\n// ==============================3rd=======================================================","map":{"version":3,"names":[],"sources":["Y:/MY/Certificate/E-COM/E_Commerce/src/components/PrivateRoute.jsx"],"sourcesContent":["// // components/PrivateRoute.jsx - Create a component for protected routes\r\n\r\n// import React from 'react';\r\n// import { Navigate, Outlet } from 'react-router-dom';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// const PrivateRoute = () => {\r\n//   const { isAuthenticated, loading } = useSelector(state => state.auth);\r\n  \r\n//   // If auth is being loaded, you might want to show a loading spinner\r\n//   if (loading) {\r\n//     return <div className=\"container text-center py-5\">Loading...</div>;\r\n//   }\r\n  \r\n//   // If not authenticated, redirect to login\r\n//   return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ===================================2nd===================================\r\n\r\n\r\n\r\n// // src/components/PrivateRoute.js\r\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n// const PrivateRoute = () => {\r\n//   const { isAuthenticated } = useSelector(state => state.auth);\r\n//   const location = useLocation();\r\n  \r\n//   // Store the current location before redirecting to login\r\n//   if (!isAuthenticated) {\r\n//     // Save the current path to redirect back after login\r\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\r\n//     return <Navigate to=\"/login\" />;\r\n//   }\r\n\r\n//   // If authenticated, render the protected routes\r\n//   return <Outlet />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ==============================3rd======================================================="],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}