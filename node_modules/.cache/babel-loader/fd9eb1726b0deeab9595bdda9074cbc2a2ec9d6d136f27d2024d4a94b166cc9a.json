{"ast":null,"code":"// // redux/action/authActions.js\n// import axios from 'axios';\n// // Action Types\n// export const LOGIN_REQUEST = 'LOGIN_REQUEST';\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\n// export const REGISTER_REQUEST = 'REGISTER_REQUEST';\n// export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n// export const REGISTER_FAIL = 'REGISTER_FAIL';\n// export const LOGOUT = 'LOGOUT';\n// export const USER_LOADED = 'USER_LOADED';\n// export const AUTH_ERROR = 'AUTH_ERROR';\n// const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n// // Load User\n// export const loadUser = () => async (dispatch) => {\n//   const token = localStorage.getItem('token');\n//   if (!token) {\n//     dispatch({ type: AUTH_ERROR });\n//     return;\n//   }\n//   try {\n//     const config = {\n//       headers: {\n//         'x-auth-token': token\n//       }\n//     };\n//     const res = await axios.get(`${apiUrl}/api/user`, config);\n//     dispatch({\n//       type: USER_LOADED,\n//       payload: res.data\n//     });\n//   } catch (err) {\n//     dispatch({ type: AUTH_ERROR });\n//   }\n// };\n// // Login User\n// export const login = (email, password) => async (dispatch) => {\n//   dispatch({ type: LOGIN_REQUEST });\n//   try {\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     };\n//     const body = JSON.stringify({ email, password });\n//     const res = await axios.post(`${apiUrl}/api/login`, body, config);\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//       payload: res.data\n//     });\n//     // Save to localStorage\n//     localStorage.setItem('token', res.data.token);\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\n//     dispatch(loadUser());\n//     return { success: true };\n//   } catch (err) {\n//     const errors = err.response?.data?.message || 'Login failed';\n//     dispatch({\n//       type: LOGIN_FAIL,\n//       payload: errors\n//     });\n//     return { success: false, error: errors };\n//   }\n// };\n// // Register User\n// export const register = ({ name, email, password }) => async (dispatch) => {\n//   dispatch({ type: REGISTER_REQUEST });\n//   try {\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     };\n//     const body = JSON.stringify({ name, email, password });\n//     const res = await axios.post(`${apiUrl}/api/register`, body, config);\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//       payload: res.data\n//     });\n//     // Save to localStorage\n//     localStorage.setItem('token', res.data.token);\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\n//     dispatch(loadUser());\n//     return { success: true };\n//   } catch (err) {\n//     const errors = err.response?.data?.message || 'Registration failed';\n//     dispatch({\n//       type: REGISTER_FAIL,\n//       payload: errors\n//     });\n//     return { success: false, error: errors };\n//   }\n// };\n// // Logout\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('token');\n//   localStorage.removeItem('user');\n//   dispatch({ type: LOGOUT });\n// };\nimport axios from'axios';import setAuthToken from'../../utils/setAuthToken';// adjust path if needed\n// Action Types\nexport const LOGIN_SUCCESS='LOGIN_SUCCESS';export const LOGIN_FAIL='LOGIN_FAIL';export const REGISTER_SUCCESS='REGISTER_SUCCESS';export const REGISTER_FAIL='REGISTER_FAIL';export const LOGOUT='LOGOUT';export const AUTH_ERROR='AUTH_ERROR';export const USER_LOADED='USER_LOADED';// Base URL - replace with your actual API base URL\n// const API_URL = 'http://localhost:5000/api';\nconst API_URL='https://e-com-fpj2.onrender.com';// Load User\nexport const loadUser=()=>async dispatch=>{if(localStorage.token){setAuthToken(localStorage.token);// âœ… set token globally\n}else{dispatch({type:AUTH_ERROR});return;}try{const res=await axios.get(\"\".concat(API_URL,\"/auth/user\"));dispatch({type:USER_LOADED,payload:res.data});}catch(err){dispatch({type:AUTH_ERROR});}};// Register User\nexport const register=_ref=>{let{name,email,password}=_ref;return async dispatch=>{try{const config={headers:{'Content-Type':'application/json'}};const body=JSON.stringify({name,email,password});const res=await axios.post(\"\".concat(API_URL,\"/users\"),body,config);dispatch({type:REGISTER_SUCCESS,payload:res.data});dispatch(loadUser());}catch(err){var _err$response,_err$response$data;dispatch({type:REGISTER_FAIL,payload:((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.msg)||'Registration failed'});}};};// Login User\nexport const login=_ref2=>{let{email,password}=_ref2;return async dispatch=>{try{const config={headers:{'Content-Type':'application/json'}};const body=JSON.stringify({email,password});const res=await axios.post(\"\".concat(API_URL,\"/auth\"),body,config);dispatch({type:LOGIN_SUCCESS,payload:res.data});dispatch(loadUser());}catch(err){var _err$response2,_err$response2$data;dispatch({type:LOGIN_FAIL,payload:((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.msg)||'Login failed'});}};};// Logout User\nexport const logout=()=>dispatch=>{dispatch({type:LOGOUT});};","map":{"version":3,"names":["axios","setAuthToken","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT","AUTH_ERROR","USER_LOADED","API_URL","loadUser","dispatch","localStorage","token","type","res","get","concat","payload","data","err","register","_ref","name","email","password","config","headers","body","JSON","stringify","post","_err$response","_err$response$data","response","msg","login","_ref2","_err$response2","_err$response2$data","logout"],"sources":["Y:/MY/Certificate/E-COM/E_Commerce/src/redux/action/authActions.js"],"sourcesContent":["// // redux/action/authActions.js\r\n// import axios from 'axios';\r\n\r\n// // Action Types\r\n// export const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\r\n// export const REGISTER_REQUEST = 'REGISTER_REQUEST';\r\n// export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\n// export const REGISTER_FAIL = 'REGISTER_FAIL';\r\n// export const LOGOUT = 'LOGOUT';\r\n// export const USER_LOADED = 'USER_LOADED';\r\n// export const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\n// const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// // Load User\r\n// export const loadUser = () => async (dispatch) => {\r\n//   const token = localStorage.getItem('token');\r\n  \r\n//   if (!token) {\r\n//     dispatch({ type: AUTH_ERROR });\r\n//     return;\r\n//   }\r\n  \r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         'x-auth-token': token\r\n//       }\r\n//     };\r\n    \r\n//     const res = await axios.get(`${apiUrl}/api/user`, config);\r\n    \r\n//     dispatch({\r\n//       type: USER_LOADED,\r\n//       payload: res.data\r\n//     });\r\n//   } catch (err) {\r\n//     dispatch({ type: AUTH_ERROR });\r\n//   }\r\n// };\r\n\r\n// // Login User\r\n// export const login = (email, password) => async (dispatch) => {\r\n//   dispatch({ type: LOGIN_REQUEST });\r\n  \r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n    \r\n//     const body = JSON.stringify({ email, password });\r\n    \r\n//     const res = await axios.post(`${apiUrl}/api/login`, body, config);\r\n    \r\n//     dispatch({\r\n//       type: LOGIN_SUCCESS,\r\n//       payload: res.data\r\n//     });\r\n    \r\n//     // Save to localStorage\r\n//     localStorage.setItem('token', res.data.token);\r\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\r\n    \r\n//     dispatch(loadUser());\r\n    \r\n//     return { success: true };\r\n//   } catch (err) {\r\n//     const errors = err.response?.data?.message || 'Login failed';\r\n    \r\n//     dispatch({\r\n//       type: LOGIN_FAIL,\r\n//       payload: errors\r\n//     });\r\n    \r\n//     return { success: false, error: errors };\r\n//   }\r\n// };\r\n\r\n// // Register User\r\n// export const register = ({ name, email, password }) => async (dispatch) => {\r\n//   dispatch({ type: REGISTER_REQUEST });\r\n  \r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n    \r\n//     const body = JSON.stringify({ name, email, password });\r\n    \r\n//     const res = await axios.post(`${apiUrl}/api/register`, body, config);\r\n    \r\n//     dispatch({\r\n//       type: REGISTER_SUCCESS,\r\n//       payload: res.data\r\n//     });\r\n    \r\n//     // Save to localStorage\r\n//     localStorage.setItem('token', res.data.token);\r\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\r\n    \r\n//     dispatch(loadUser());\r\n    \r\n//     return { success: true };\r\n//   } catch (err) {\r\n//     const errors = err.response?.data?.message || 'Registration failed';\r\n    \r\n//     dispatch({\r\n//       type: REGISTER_FAIL,\r\n//       payload: errors\r\n//     });\r\n    \r\n//     return { success: false, error: errors };\r\n//   }\r\n// };\r\n\r\n// // Logout\r\n// export const logout = () => (dispatch) => {\r\n//   localStorage.removeItem('token');\r\n//   localStorage.removeItem('user');\r\n  \r\n//   dispatch({ type: LOGOUT });\r\n// };\r\n\r\n\r\n\r\nimport axios from 'axios';\r\nimport setAuthToken from '../../utils/setAuthToken'; // adjust path if needed\r\n\r\n\r\n// Action Types\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const USER_LOADED = 'USER_LOADED';\r\n\r\n\r\n// Base URL - replace with your actual API base URL\r\n// const API_URL = 'http://localhost:5000/api';\r\nconst API_URL = 'https://e-com-fpj2.onrender.com';\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token); // âœ… set token globally\r\n  } else {\r\n    dispatch({ type: AUTH_ERROR });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const res = await axios.get(`${API_URL}/auth/user`);\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    const body = JSON.stringify({ name, email, password });\r\n    const res = await axios.post(`${API_URL}/users`, body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: err.response?.data?.msg || 'Registration failed'\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = ({ email, password }) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n    const res = await axios.post(`${API_URL}/auth`, body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: err.response?.data?.msg || 'Login failed'\r\n    });\r\n  }\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n};"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}