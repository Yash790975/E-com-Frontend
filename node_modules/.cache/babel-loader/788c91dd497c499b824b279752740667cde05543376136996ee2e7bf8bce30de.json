{"ast":null,"code":"// // components/PrivateRoute.jsx - Create a component for protected routes\n// import React from 'react';\n// import { Navigate, Outlet } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\n// const PrivateRoute = () => {\n//   const { isAuthenticated, loading } = useSelector(state => state.auth);\n//   // If auth is being loaded, you might want to show a loading spinner\n//   if (loading) {\n//     return <div className=\"container text-center py-5\">Loading...</div>;\n//   }\n//   // If not authenticated, redirect to login\n//   return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\n// };\n// export default PrivateRoute;\n// ===================================2nd===================================\n// // src/components/PrivateRoute.js\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\n// import { useSelector } from \"react-redux\";\n// const PrivateRoute = () => {\n//   const { isAuthenticated } = useSelector(state => state.auth);\n//   const location = useLocation();\n//   // Store the current location before redirecting to login\n//   if (!isAuthenticated) {\n//     // Save the current path to redirect back after login\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\n//     return <Navigate to=\"/login\" />;\n//   }\n//   // If authenticated, render the protected routes\n//   return <Outlet />;\n// };\n// export default PrivateRoute;\n// ==============================3rd=======================================================\n// // src/components/PrivateRoute.js\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\n// import React from \"react\";\n// const PrivateRoute = () => {\n//   const location = useLocation();\n//   const token = localStorage.getItem(\"token\");\n//   if (!token) {\n//     // Save the current path to redirect back after login\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\n//     return <Navigate to=\"/login\" />;\n//   }\n//   // If authenticated, render the protected routes\n//   return <Outlet />;\n// };\n// export default PrivateRoute;\n// ========================================4th======================================\n// src/components/PrivateRoute.js\nimport{useSelector}from'react-redux';import{Navigate,Outlet}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";const PrivateRoute=()=>{const{isAuthenticated,loading}=useSelector(state=>state.auth);if(loading)return null;// Optional: replace with spinner\nreturn isAuthenticated?/*#__PURE__*/_jsx(Outlet,{}):/*#__PURE__*/_jsx(Navigate,{to:\"/login\"});};export default PrivateRoute;","map":{"version":3,"names":["useSelector","Navigate","Outlet","jsx","_jsx","PrivateRoute","isAuthenticated","loading","state","auth","to"],"sources":["Y:/MY/Certificate/E-COM/E_Commerce/src/components/PrivateRoute.jsx"],"sourcesContent":["// // components/PrivateRoute.jsx - Create a component for protected routes\r\n\r\n// import React from 'react';\r\n// import { Navigate, Outlet } from 'react-router-dom';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// const PrivateRoute = () => {\r\n//   const { isAuthenticated, loading } = useSelector(state => state.auth);\r\n  \r\n//   // If auth is being loaded, you might want to show a loading spinner\r\n//   if (loading) {\r\n//     return <div className=\"container text-center py-5\">Loading...</div>;\r\n//   }\r\n  \r\n//   // If not authenticated, redirect to login\r\n//   return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ===================================2nd===================================\r\n\r\n\r\n\r\n// // src/components/PrivateRoute.js\r\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n// const PrivateRoute = () => {\r\n//   const { isAuthenticated } = useSelector(state => state.auth);\r\n//   const location = useLocation();\r\n  \r\n//   // Store the current location before redirecting to login\r\n//   if (!isAuthenticated) {\r\n//     // Save the current path to redirect back after login\r\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\r\n//     return <Navigate to=\"/login\" />;\r\n//   }\r\n\r\n//   // If authenticated, render the protected routes\r\n//   return <Outlet />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ==============================3rd=======================================================\r\n\r\n\r\n// // src/components/PrivateRoute.js\r\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\n// import React from \"react\";\r\n\r\n// const PrivateRoute = () => {\r\n//   const location = useLocation();\r\n//   const token = localStorage.getItem(\"token\");\r\n  \r\n//   if (!token) {\r\n//     // Save the current path to redirect back after login\r\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\r\n//     return <Navigate to=\"/login\" />;\r\n//   }\r\n\r\n//   // If authenticated, render the protected routes\r\n//   return <Outlet />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ========================================4th======================================\r\n\r\n\r\n// src/components/PrivateRoute.js\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\n\r\nconst PrivateRoute = () => {\r\n  const { isAuthenticated, loading } = useSelector((state) => state.auth);\r\n\r\n  if (loading) return null; // Optional: replace with spinner\r\n\r\n  return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA,OAASA,WAAW,KAAQ,aAAa,CACzC,OAASC,QAAQ,CAAEC,MAAM,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpD,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAEC,eAAe,CAAEC,OAAQ,CAAC,CAAGP,WAAW,CAAEQ,KAAK,EAAKA,KAAK,CAACC,IAAI,CAAC,CAEvE,GAAIF,OAAO,CAAE,MAAO,KAAI,CAAE;AAE1B,MAAO,CAAAD,eAAe,cAAGF,IAAA,CAACF,MAAM,GAAE,CAAC,cAAGE,IAAA,CAACH,QAAQ,EAACS,EAAE,CAAC,QAAQ,CAAE,CAAC,CAChE,CAAC,CAED,cAAe,CAAAL,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}