{"ast":null,"code":"var _jsxFileName = \"Y:\\\\MY\\\\Certificate\\\\E-COM\\\\E_Commerce\\\\src\\\\components\\\\PrivateRoute.jsx\",\n  _s = $RefreshSig$();\n// // components/PrivateRoute.jsx - Create a component for protected routes\n\n// import React from 'react';\n// import { Navigate, Outlet } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\n\n// const PrivateRoute = () => {\n//   const { isAuthenticated, loading } = useSelector(state => state.auth);\n\n//   // If auth is being loaded, you might want to show a loading spinner\n//   if (loading) {\n//     return <div className=\"container text-center py-5\">Loading...</div>;\n//   }\n\n//   // If not authenticated, redirect to login\n//   return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\n// };\n\n// export default PrivateRoute;\n\n// ===================================2nd===================================\n\n// // src/components/PrivateRoute.js\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\n// import { useSelector } from \"react-redux\";\n\n// const PrivateRoute = () => {\n//   const { isAuthenticated } = useSelector(state => state.auth);\n//   const location = useLocation();\n\n//   // Store the current location before redirecting to login\n//   if (!isAuthenticated) {\n//     // Save the current path to redirect back after login\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\n//     return <Navigate to=\"/login\" />;\n//   }\n\n//   // If authenticated, render the protected routes\n//   return <Outlet />;\n// };\n\n// export default PrivateRoute;\n\n// ==============================3rd=======================================================\n\n// src/components/PrivateRoute.js\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = () => {\n  _s();\n  const location = useLocation();\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    // Save the current path to redirect back after login\n    sessionStorage.setItem('redirectAfterLogin', location.pathname);\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated, render the protected routes\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(PrivateRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Navigate","Outlet","useLocation","React","jsxDEV","_jsxDEV","PrivateRoute","_s","location","token","localStorage","getItem","sessionStorage","setItem","pathname","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["Y:/MY/Certificate/E-COM/E_Commerce/src/components/PrivateRoute.jsx"],"sourcesContent":["// // components/PrivateRoute.jsx - Create a component for protected routes\r\n\r\n// import React from 'react';\r\n// import { Navigate, Outlet } from 'react-router-dom';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// const PrivateRoute = () => {\r\n//   const { isAuthenticated, loading } = useSelector(state => state.auth);\r\n  \r\n//   // If auth is being loaded, you might want to show a loading spinner\r\n//   if (loading) {\r\n//     return <div className=\"container text-center py-5\">Loading...</div>;\r\n//   }\r\n  \r\n//   // If not authenticated, redirect to login\r\n//   return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ===================================2nd===================================\r\n\r\n\r\n\r\n// // src/components/PrivateRoute.js\r\n// import { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n// const PrivateRoute = () => {\r\n//   const { isAuthenticated } = useSelector(state => state.auth);\r\n//   const location = useLocation();\r\n  \r\n//   // Store the current location before redirecting to login\r\n//   if (!isAuthenticated) {\r\n//     // Save the current path to redirect back after login\r\n//     sessionStorage.setItem('redirectAfterLogin', location.pathname);\r\n//     return <Navigate to=\"/login\" />;\r\n//   }\r\n\r\n//   // If authenticated, render the protected routes\r\n//   return <Outlet />;\r\n// };\r\n\r\n// export default PrivateRoute;\r\n\r\n\r\n// ==============================3rd=======================================================\r\n\r\n\r\n// src/components/PrivateRoute.js\r\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst PrivateRoute = () => {\r\n  const location = useLocation();\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    // Save the current path to redirect back after login\r\n    sessionStorage.setItem('redirectAfterLogin', location.pathname);\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  // If authenticated, render the protected routes\r\n  return <Outlet />;\r\n};\r\n\r\nexport default PrivateRoute;"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACV;IACAG,cAAc,CAACC,OAAO,CAAC,oBAAoB,EAAEL,QAAQ,CAACM,QAAQ,CAAC;IAC/D,oBAAOT,OAAA,CAACL,QAAQ;MAACe,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;;EAEA;EACA,oBAAOd,OAAA,CAACJ,MAAM;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAACZ,EAAA,CAZID,YAAY;EAAA,QACCJ,WAAW;AAAA;AAAAkB,EAAA,GADxBd,YAAY;AAclB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}