{"ast":null,"code":"// // redux/action/authActions.js\n// import axios from 'axios';\n\n// // Action Types\n// export const LOGIN_REQUEST = 'LOGIN_REQUEST';\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\n// export const REGISTER_REQUEST = 'REGISTER_REQUEST';\n// export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n// export const REGISTER_FAIL = 'REGISTER_FAIL';\n// export const LOGOUT = 'LOGOUT';\n// export const USER_LOADED = 'USER_LOADED';\n// export const AUTH_ERROR = 'AUTH_ERROR';\n\n// const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // Load User\n// export const loadUser = () => async (dispatch) => {\n//   const token = localStorage.getItem('token');\n\n//   if (!token) {\n//     dispatch({ type: AUTH_ERROR });\n//     return;\n//   }\n\n//   try {\n//     const config = {\n//       headers: {\n//         'x-auth-token': token\n//       }\n//     };\n\n//     const res = await axios.get(`${apiUrl}/api/user`, config);\n\n//     dispatch({\n//       type: USER_LOADED,\n//       payload: res.data\n//     });\n//   } catch (err) {\n//     dispatch({ type: AUTH_ERROR });\n//   }\n// };\n\n// // Login User\n// export const login = (email, password) => async (dispatch) => {\n//   dispatch({ type: LOGIN_REQUEST });\n\n//   try {\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     };\n\n//     const body = JSON.stringify({ email, password });\n\n//     const res = await axios.post(`${apiUrl}/api/login`, body, config);\n\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//       payload: res.data\n//     });\n\n//     // Save to localStorage\n//     localStorage.setItem('token', res.data.token);\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\n\n//     dispatch(loadUser());\n\n//     return { success: true };\n//   } catch (err) {\n//     const errors = err.response?.data?.message || 'Login failed';\n\n//     dispatch({\n//       type: LOGIN_FAIL,\n//       payload: errors\n//     });\n\n//     return { success: false, error: errors };\n//   }\n// };\n\n// // Register User\n// export const register = ({ name, email, password }) => async (dispatch) => {\n//   dispatch({ type: REGISTER_REQUEST });\n\n//   try {\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     };\n\n//     const body = JSON.stringify({ name, email, password });\n\n//     const res = await axios.post(`${apiUrl}/api/register`, body, config);\n\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//       payload: res.data\n//     });\n\n//     // Save to localStorage\n//     localStorage.setItem('token', res.data.token);\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\n\n//     dispatch(loadUser());\n\n//     return { success: true };\n//   } catch (err) {\n//     const errors = err.response?.data?.message || 'Registration failed';\n\n//     dispatch({\n//       type: REGISTER_FAIL,\n//       payload: errors\n//     });\n\n//     return { success: false, error: errors };\n//   }\n// };\n\n// // Logout\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('token');\n//   localStorage.removeItem('user');\n\n//   dispatch({ type: LOGOUT });\n// };\n\nimport axios from 'axios';\n\n// Action Types\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const LOGOUT = 'LOGOUT';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const USER_LOADED = 'USER_LOADED';\n\n// Base URL - replace with your actual API base URL\nconst API_URL = 'http://localhost:5000/api';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n\n    // Set axios auth header\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n    } else {\n      delete axios.defaults.headers.common['x-auth-token'];\n      return dispatch({\n        type: AUTH_ERROR\n      });\n    }\n    const res = await axios.get(`${API_URL}/auth/user`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n    const res = await axios.post(`${API_URL}/users`, body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    var _err$response, _err$response$data;\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg) || 'Registration failed'\n    });\n  }\n};\n\n// Login User\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    });\n    const res = await axios.post(`${API_URL}/auth`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    var _err$response2, _err$response2$data;\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.msg) || 'Login failed'\n    });\n  }\n};\n\n// Logout User\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT","AUTH_ERROR","USER_LOADED","API_URL","loadUser","dispatch","token","localStorage","getItem","defaults","headers","common","type","res","get","payload","data","err","register","name","email","password","config","body","JSON","stringify","post","_err$response","_err$response$data","response","msg","login","_err$response2","_err$response2$data","logout"],"sources":["Y:/MY/Certificate/E-COM/E_Commerce/src/redux/action/authActions.js"],"sourcesContent":["// // redux/action/authActions.js\r\n// import axios from 'axios';\r\n\r\n// // Action Types\r\n// export const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\r\n// export const REGISTER_REQUEST = 'REGISTER_REQUEST';\r\n// export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\n// export const REGISTER_FAIL = 'REGISTER_FAIL';\r\n// export const LOGOUT = 'LOGOUT';\r\n// export const USER_LOADED = 'USER_LOADED';\r\n// export const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\n// const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// // Load User\r\n// export const loadUser = () => async (dispatch) => {\r\n//   const token = localStorage.getItem('token');\r\n  \r\n//   if (!token) {\r\n//     dispatch({ type: AUTH_ERROR });\r\n//     return;\r\n//   }\r\n  \r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         'x-auth-token': token\r\n//       }\r\n//     };\r\n    \r\n//     const res = await axios.get(`${apiUrl}/api/user`, config);\r\n    \r\n//     dispatch({\r\n//       type: USER_LOADED,\r\n//       payload: res.data\r\n//     });\r\n//   } catch (err) {\r\n//     dispatch({ type: AUTH_ERROR });\r\n//   }\r\n// };\r\n\r\n// // Login User\r\n// export const login = (email, password) => async (dispatch) => {\r\n//   dispatch({ type: LOGIN_REQUEST });\r\n  \r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n    \r\n//     const body = JSON.stringify({ email, password });\r\n    \r\n//     const res = await axios.post(`${apiUrl}/api/login`, body, config);\r\n    \r\n//     dispatch({\r\n//       type: LOGIN_SUCCESS,\r\n//       payload: res.data\r\n//     });\r\n    \r\n//     // Save to localStorage\r\n//     localStorage.setItem('token', res.data.token);\r\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\r\n    \r\n//     dispatch(loadUser());\r\n    \r\n//     return { success: true };\r\n//   } catch (err) {\r\n//     const errors = err.response?.data?.message || 'Login failed';\r\n    \r\n//     dispatch({\r\n//       type: LOGIN_FAIL,\r\n//       payload: errors\r\n//     });\r\n    \r\n//     return { success: false, error: errors };\r\n//   }\r\n// };\r\n\r\n// // Register User\r\n// export const register = ({ name, email, password }) => async (dispatch) => {\r\n//   dispatch({ type: REGISTER_REQUEST });\r\n  \r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n    \r\n//     const body = JSON.stringify({ name, email, password });\r\n    \r\n//     const res = await axios.post(`${apiUrl}/api/register`, body, config);\r\n    \r\n//     dispatch({\r\n//       type: REGISTER_SUCCESS,\r\n//       payload: res.data\r\n//     });\r\n    \r\n//     // Save to localStorage\r\n//     localStorage.setItem('token', res.data.token);\r\n//     localStorage.setItem('user', JSON.stringify(res.data.user));\r\n    \r\n//     dispatch(loadUser());\r\n    \r\n//     return { success: true };\r\n//   } catch (err) {\r\n//     const errors = err.response?.data?.message || 'Registration failed';\r\n    \r\n//     dispatch({\r\n//       type: REGISTER_FAIL,\r\n//       payload: errors\r\n//     });\r\n    \r\n//     return { success: false, error: errors };\r\n//   }\r\n// };\r\n\r\n// // Logout\r\n// export const logout = () => (dispatch) => {\r\n//   localStorage.removeItem('token');\r\n//   localStorage.removeItem('user');\r\n  \r\n//   dispatch({ type: LOGOUT });\r\n// };\r\n\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const USER_LOADED = 'USER_LOADED';\r\n\r\n// Base URL - replace with your actual API base URL\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Set axios auth header\r\n    if (token) {\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n    } else {\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n      return dispatch({ type: AUTH_ERROR });\r\n    }\r\n    \r\n    const res = await axios.get(`${API_URL}/auth/user`);\r\n    \r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    const body = JSON.stringify({ name, email, password });\r\n    const res = await axios.post(`${API_URL}/users`, body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: err.response?.data?.msg || 'Registration failed'\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = ({ email, password }) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n    const res = await axios.post(`${API_URL}/auth`, body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: err.response?.data?.msg || 'Login failed'\r\n    });\r\n  }\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}